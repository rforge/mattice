	preorderOU <- function(branchList, tree, startNode, startState, alpha, theta) {
	  ## Recursive function to generate the data under a Brownian motion or OU model
	  ## modified for ouchtree (s4) Dec 08
	  ## branch times back from each tip are in tree@epochs, indexed by tip number
	  ## nodes back from each node (including tips) are in tree@lineages, indexed by node number
	  ## a branch length is the time of a node - the time of its ancestor
	  ## not fixed yet for ouchtree
	  startBranch <- startNode ## startNode really means start branch... it's the end node of the branch starting this process
	  workingBranch <- branchList[[startBranch]]
	  workingBranch[1] <- startState
	  for (brStep in 2:length(workingBranch)) { ## assumes at least two steps per branch
	    workingBranch[brStep] <- 
	      workingBranch[brStep - 1] + workingBranch[brStep] + alpha[startBranch] / steps * (theta[startBranch] - workingBranch[brStep - 1]) # denom was mult'd by steps... should be? 
	    }
	  branchList[[startBranch]] <- workingBranch
	  endState <- branchList[[startBranch]][length(branchList[[startBranch]])]
	  daughterBranches <- tree@nodes[which(tree@ancestors == startNode)]
	  if(!identical(as.integer(daughterBranches), integer(0))) {
	    for(i in daughterBranches) branchList <- preorderOU(branchList, tree, i, endState, alpha, theta) }
	  return(branchList) 
	}  
